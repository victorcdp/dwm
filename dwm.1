.TH DWM 1 dwm\-VERSION
.SH NAME
dwm \- dynamic window manager
.SH SYNOPSIS
.B dwm
.RB [ \-v ]
.SH DESCRIPTION
dwm is a dynamic window manager for X. It manages windows in tiled, monocle
and floating layouts. Either layout can be applied dynamically, optimising the
environment for the application in use and the task performed.
.P
In tiled layouts windows are managed in a master and stacking area. The master
area on the left contains one window by default, and the stacking area on the
right contains all other windows. The number of master area windows can be
adjusted from zero to an arbitrary number. In monocle layout all windows are
maximised to the screen size. In floating layout windows can be resized and
moved freely. Dialog windows are always managed floating, regardless of the
layout applied.
.P
Windows are grouped by tags. Each window can be tagged with one or multiple
tags. Selecting certain tags displays all windows with these tags.
.P
Each screen contains a small status bar which displays all available tags, the
layout, the title of the focused window, and the text read from the root window
name property, if the screen is focused. A floating window is indicated with an
empty square and a maximised floating window is indicated with a filled square
before the windows title.  The selected tags are indicated with a different
color. The tags of the focused window are indicated with a filled square in the
top left corner.  The tags which are applied to one or more windows are
indicated with an empty square in the top left corner.
.P
dwm draws a small border around windows to indicate the focus state.
.P
On start, dwm can start additional programs that may be specified in two special
shell scripts (see the FILES section below), autostartwait.sh and
autostart.sh. The former is executed first and dwm will wait for its
termination before starting. The latter is executed in the background before
dwm enters its handler loop. Either of these files may be omitted.
.SH OPTIONS
.TP 30
.B \-v
prints version information to stderr, then exits.
.SH USAGE
.SS Status bar
.TP 30
.B X root window name
is read and displayed in the status text area. It can be set with the
.BR xsetroot (1)
command.
.TP 30
.B Left Click
click on a tag label to display all windows with that tag, click on the layout
label toggles between tiled and floating layout.
.TP 30
.B Right Click
click on a tag label adds/removes all windows with that tag to/from the view.
.TP 30
.B Super\-Left Click
click on a tag label applies that tag to the focused window.
.TP 30
.B Super\-Right Click
click on a tag label adds/removes that tag to/from the focused window.
.SS Keyboard commands
.TP
.B BASIC
.TP 30
.B Super\-Control\-q
Quit dwm.
.TP 30
.B Super\-Shift\-q
Restart dwm.
.TP 30
.B Super\-q
Reload Xresources.
.TP 30
.B Super\-Return
Launch
.BR st(1)
terminal.
.TP 30
.B Super\-d
Spawn
.BR dmenu(1)
for launching other programs.
.TP
.B LAYOUTS
.TP 30
.B Super\-t
Sets tile layout.
.TP 30
.B Super\-Shift\-t
Sets gaplessgrid layout.
.TP 30
.B Super\-y
Sets centeredmaster layout.
.TP 30
.B Super\-Shift\-y
Sets deck layout.
.TP 30
.B Super\-Tab
Cycle layouts.
.TP 30
.B Super\-Shift\-Tab
Cycle layouts reverse.
.TP
.B STACK
.TP 30
.B Super\-Shift\-c
Close focused window.
.TP 30
.B Super\-j
Focus next window.
.TP 30
.B Super\-k
Focus previous window.
.TP 30
.B Super\-Shift\-j
Move focused window down in stack.
.TP 30
.B Super\-Shift\-k
Move focused window up in stack.
.TP 30
.B Super\-e
Focus urgent window.
.TP 30
.B Super\-s
Toggle focused window as sticky.
.TP 30
.B Super\-m
Increase number of windows in master area.
.TP 30
.B Super\-Shift\-m
Decrease number of windows in master area.
.TP
.B MONITOR
.TP 30
.B Super\-,
Focus previous screen.
.TP 30
.B Super\-.
Focus next screen.
.TP 30
.B Super\-Shift\-,
Send focused window to previous screen.
.TP 30
.B Super\-Shift\-.
Send focused window to next screen.
.TP
.B GAPS
.TP 30
.B Super\-g
Toggle gaps.
.TP 30
.B Super\-Shift\-g
Set default gaps.
.TP 30
.B Super\-\-
Decrease outer gaps.
.TP 30
.B Super\-=
Increase outer gaps.
.TP 30
.B Super\-Shift\-\-
Decrease inner gaps.
.TP 30
.B Super\-Shift\-=
Increase inner gaps.
.TP 30
.B Super\-Control\-\-
Decrease all gaps.
.TP 30
.B Super\-Control\-=
Increase all gaps.
.TP
.B RESIZE
.TP 30
.B Super\-space
Toggle focused window between floating and tiled state.
.TP 30
.B Super\-f
Toggle full screen.
.TP 30
.B Super\-Shift\-f
Toggle fake full screen.
.TP 30
.B Super\-Control\-h
Decrease master area size.
.TP 30
.B Super\-Control\-j
Decrease stack area size.
.TP 30
.B Super\-Control\-k
Increase stack area size.
.TP 30
.B Super\-Control\-l
Increase master area size.
.TP
.B TAG
.TP 30
.B Super\-[1..n]
View all windows with nth tag.
.TP 30
.B Super\-Shift\-[1..n]
Apply and view nth tag to focused window.
.TP 30
.B Super\-0
View all windows with any tag.
.TP 30
.B Super\-Shift\-0
Apply all tags to focused window.
.TP 30
.B Super\-Control\-[1..n]
Add/remove all windows with nth tag to/from the view.
.TP 30
.B Super\-Control\-Shift\-[1..n]
Add/remove nth tag to/from focused window.
.TP 30
.B Super\-Tab
Cycle tags.
.TP 30
.B Super\-Shift\-Tab
Cycle tags reverse.
.TP 30
.B Super\-r
Move all windows per tag to leftmost unoccupied tags.
.TP 30
.B Super\-Shift\-r
Distribute all windows through the tags.
.TP 30
.B Super\-b
Toggles bar on and off.
.TP
.B SCRATCHPAD
.TP 30
.B Super\-p
Toggle all windows with scratchpad tag.
.TP 30
.B Super\-n
Apply scratchpad tag to focused window.
.TP 30
.B Super\-Shift\-n
Remove scratchpad tag from focused window.
.SS Mouse commands
.TP 30
.B Super\-Left Click
Change position of focused window in stack while dragging.
.TP 30
.B Super\-Shift\-Left Click
Change size of master area while dragging.
.TP 30
.B Super\-Middle Click
Toggles focused window between floating and tiled state.
.TP 30
.B Super\-Right Click
Resize focused window while dragging. Tiled windows will be toggled to the floating state.
.TP 30
.B Super\-Shift\-Right Click
Change size of stack area while dragging.
.SH FILES
The files containing programs to be started along with dwm are searched for in
the following directories:
.IP "1. $XDG_CONFIG_HOME/dwm"
.IP "2. $HOME/.config/dwm"
.IP "3. $HOME/.dwm"
.P
The first existing directory is scanned for any of the autostart files below. You can also give
a custom path from $HOME in config.h file. Change 'pathfromhome' variable to point to a valid
directory from your $HOME directory. Don't add leading or trailing slashes (/) in the path specified.
Make sure both the files are exectable if they exists.
.TP 30
autostart.sh
This file is started as a shell background process before dwm enters its handler loop.
.TP 30
autostartwait.sh
This file is started before any autostart.sh; dwm waits for its termination.
.SH CUSTOMIZATION
dwm is customized by creating a custom config.h and (re)compiling the source
code. This keeps it fast, secure and simple.
.SH SEE ALSO
.BR dmenu (1),
.BR st (1)
.SH ISSUES
Java applications which use the XToolkit/XAWT backend may draw grey windows
only. The XToolkit/XAWT backend breaks ICCCM-compliance in recent JDK 1.5 and early
JDK 1.6 versions, because it assumes a reparenting window manager. Possible workarounds
are using JDK 1.4 (which doesn't contain the XToolkit/XAWT backend) or setting the
environment variable
.BR AWT_TOOLKIT=MToolkit
(to use the older Motif backend instead) or running
.B xprop -root -f _NET_WM_NAME 32a -set _NET_WM_NAME LG3D
or
.B wmname LG3D
(to pretend that a non-reparenting window manager is running that the
XToolkit/XAWT backend can recognize) or when using OpenJDK setting the environment variable
.BR _JAVA_AWT_WM_NONREPARENTING=1 .
.SH BUGS
Send all bug reports with a patch to hackers@suckless.org.
